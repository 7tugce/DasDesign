(function() {
  var HTMLExtractor, _extractor, getHTML, request, should, testData;

  HTMLExtractor = require("../lib/html_extractor");

  testData = require("./test_data");

  request = require("request");

  should = require("should");

  _extractor = new HTMLExtractor(true);

  getHTML = function(link, cb) {
    request.get(link, function(err, data) {
      if (err) {
        throw err;
      }
      cb(data.body);
    });
  };

  describe('HTML-dispatch-TEST', function() {
    before(function(done) {
      done();
    });
    after(function(done) {
      done();
    });
    describe('TEST Parser', function() {
      it("Test tcs.de HTML", function(done) {
        _extractor.extract(testData.html[0], function(err, data) {
          if (err) {
            throw err;
          }
          should.exist(data.meta);
          should.exist(data.meta.title);
          data.meta.title.should.equal("TCS: Team Centric Software GmbH & Co. KG");
          should.exist(data.body);
          data.body.should.not.be.empty;
          data.body.should.not.containEql("$('#contactform')");
          data.body.should.not.containEql(".testcssselector");
          data.body.should.not.containEql("</");
          done();
        });
      });
      it("Test spiegel.de HTML", function(done) {
        _extractor.extract(testData.html[1], function(err, data) {
          if (err) {
            throw err;
          }
          should.exist(data.meta);
          should.exist(data.meta.title);
          data.meta.title.should.equal("SPIEGEL ONLINE - Nachrichten");
          should.exist(data.body);
          data.body.should.not.containEql("</");
          data.body.should.not.be.empty;
          done();
        });
      });
    });
    describe('Test Request', function() {
      return it("test get HTML", function(done) {
        getHTML(testData.links[0], function(html) {
          html.should.be.a.String();
          html.length.should.be.above(0);
          html.should.containEql("Team Centric Software GmbH");
          done();
        });
      });
    });
    describe('Test Parser with multiple pages', function() {
      var _count, _link, fn, i, idx, len, ref;
      _count = process.env.COUNT || 5;
      ref = testData.links.slice(0, +_count + 1 || 9e9);
      fn = function(_link) {
        return it(idx + ": Parse '" + _link + "'", function(done) {
          getHTML(_link, function(html) {
            _extractor.extract(html, function(err, data) {
              if (err) {
                throw err;
              }
              should.exist(data.meta);
              should.exist(data.meta.title);
              should.exist(data.body);
              data.body.should.not.containEql("</");
              data.body.should.not.be.empty;
              done();
            });
          });
        });
      };
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        _link = ref[idx];
        fn(_link);
      }
    });
    describe('Test reducing', function() {
      var _reduce, fn, i, idx, len, ref;
      ref = testData.reduce;
      fn = function(_reduce, idx) {
        it(idx + ": Reduced parse '" + _reduce.url + "'", function(done) {
          getHTML(_reduce.url, function(html) {
            _extractor.extract(html, _reduce.reduced, function(err, data) {
              if (err) {
                throw err;
              }
              should.exist(data.meta);
              should.exist(data.meta.title);
              should.exist(data.body);
              data.body.should.not.be.empty;
              switch (idx) {
                case 0:
                  data.body.should.be["instanceof"](String);
                  data.body.should.not.containEql("</");
                  data.body.should.not.containEql("EDV-Downloadbereich");
                  data.body.should.not.containEql("Spitalgasse 31");
                  data.body.should.containEql("Herzlich willkommen im APO-Shop");
                  break;
                case 1:
                  data.body.should.be["instanceof"](String);
                  data.body.should.not.containEql("</");
                  data.body.should.not.containEql("Impressum");
                  data.body.should.not.containEql("Haftungsausschluss");
                  data.body.should.containEql("Geschäftsführung");
                  break;
                case 2:
                  data.body.should.be["instanceof"](Array);
                  data.body.should.have.length(11);
                  data.body[0].should.startWith("Dynamo DB");
              }
              done();
            });
          });
        });
      };
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        _reduce = ref[idx];
        fn(_reduce, idx);
        return;
      }
    });
    describe('Issues', function() {
      it("#1 Returned body contains html entities", function(done) {
        var _exp, _html;
        _html = '<body><p>&nbsp;HELLO!&nbsp;</p><h1>&nbsp;Headline &gt; &lt; &euro;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;</h1></body>';
        _exp = {
          meta: {
            title: "",
            description: "",
            keywords: []
          },
          body: "HELLO! Headline > < € ...",
          h1: ["Headline > < €   ..."]
        };
        _extractor.extract(_html, function(err, data) {
          if (err) {
            throw err;
          }
          should.exist(data);
          data.should.eql(_exp);
          done();
        });
      });
      return;
      return it("#3 str.replace is not a function when using reduce with list: true", function(done) {
        var _exp, _html, _reduce;
        _html = '<body><p id="indexable">term one</p><p>non indexable content</p><p id="indexable">term&nbsp;&nbsp;&nbsp;two&nbsp;&nbsp;&nbsp;</p></body>';
        _exp = {
          meta: {
            title: "",
            description: "",
            keywords: []
          },
          body: ["term one", "term   two"],
          h1: []
        };
        _reduce = {
          tag: "p",
          attr: "id",
          val: "indexable",
          list: true
        };
        _extractor.extract(_html, _reduce, function(err, data) {
          if (err) {
            throw err;
          }
          should.exist(data);
          data.should.eql(_exp);
          done();
        });
      });
    });
  });

}).call(this);
